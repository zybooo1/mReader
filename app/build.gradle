apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply from: "../base_compiler.gradle"
// 依赖插件脚本

//解决arouter使用乐固加固后报错
apply plugin: 'auto-register'
autoregister {
    registerInfo = [
            [
                    'scanInterface'           : 'com.alibaba.android.arouter.facade.template.IRouteRoot'
                    , 'codeInsertToClassName' : 'com.alibaba.android.arouter.core.LogisticsCenter'
                    , 'codeInsertToMethodName': 'loadRouterMap'//static方法
                    , 'registerMethodName'    : 'registerRouteRoot' //static方法
                    , 'include'               : ['com/alibaba/android/arouter/routes/.*']
            ],
            [
                    'scanInterface'           : 'com.alibaba.android.arouter.facade.template.IInterceptorGroup'
                    , 'codeInsertToClassName' : 'com.alibaba.android.arouter.core.LogisticsCenter'
                    , 'codeInsertToMethodName': 'loadRouterMap'//static方法
                    , 'registerMethodName'    : 'registerInterceptor' //static方法
                    , 'include'               : ['com/alibaba/android/arouter/routes/.*']
            ],
            [
                    'scanInterface'           : 'com.alibaba.android.arouter.facade.template.IProviderGroup'
                    , 'codeInsertToClassName' : 'com.alibaba.android.arouter.core.LogisticsCenter'
                    , 'codeInsertToMethodName': 'loadRouterMap'//static方法
                    , 'registerMethodName'    : 'registerProvider' //static方法
                    , 'include'               : ['com/alibaba/android/arouter/routes/.*']
            ]
    ]
}


//获取编译时间
static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.zyb.mreader"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        //Kongzue Dialog
        renderscriptTargetApi 17
        renderscriptSupportModeEnabled true

        // 设置支持的SO库架构
        ndk {
//            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi-v7a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

    }

    // 签名配置
    signingConfigs {
        defaultSign {
            try {
                storeFile file("D:/Android/signedKey/zyb.jks")
                storePassword "123456"
                keyAlias "zyb"
                keyPassword "123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.defaultSign
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.defaultSign
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /*GreenDao*/
    greendao {
        //数据库版本，数据库升级使用到 {@link OpenHelper#onUpgrade}
        schemaVersion rootProject.ext.databaseVersion
    }

    //自定义apk文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all {
                outputFileName = "猫豆阅读${variant.versionName}_${releaseTime()}.apk"
        }
    }

    // 支持Java8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
//        abortOnError false
    }
}

dependencies {
    // 依赖 libs 目录下所有 Jar 包
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // 基础模块
    implementation project(':base')
    // 阅读模块
    implementation project(':reader')
    //业务通用模块
    implementation project(':common')
}

