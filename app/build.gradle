apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply from: "../base_compiler.gradle"
// 依赖插件脚本
//todo 暂时注释这行使tinker不再每次构建生成bakApk
//apply from: 'tinker-support.gradle'

//解决arouter使用乐固加固后报错
apply plugin: 'auto-register'
autoregister {
    registerInfo = [
            [
                    'scanInterface'           : 'com.alibaba.android.arouter.facade.template.IRouteRoot'
                    , 'codeInsertToClassName' : 'com.alibaba.android.arouter.core.LogisticsCenter'
                    , 'codeInsertToMethodName': 'loadRouterMap'//static方法
                    , 'registerMethodName'    : 'registerRouteRoot' //static方法
                    , 'include'               : ['com/alibaba/android/arouter/routes/.*']
            ],
            [
                    'scanInterface'           : 'com.alibaba.android.arouter.facade.template.IInterceptorGroup'
                    , 'codeInsertToClassName' : 'com.alibaba.android.arouter.core.LogisticsCenter'
                    , 'codeInsertToMethodName': 'loadRouterMap'//static方法
                    , 'registerMethodName'    : 'registerInterceptor' //static方法
                    , 'include'               : ['com/alibaba/android/arouter/routes/.*']
            ],
            [
                    'scanInterface'           : 'com.alibaba.android.arouter.facade.template.IProviderGroup'
                    , 'codeInsertToClassName' : 'com.alibaba.android.arouter.core.LogisticsCenter'
                    , 'codeInsertToMethodName': 'loadRouterMap'//static方法
                    , 'registerMethodName'    : 'registerProvider' //static方法
                    , 'include'               : ['com/alibaba/android/arouter/routes/.*']
            ]
    ]
}


//获取编译时间
static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.zyb.mreader"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        //Kongzue Dialog
        renderscriptTargetApi 17
        renderscriptSupportModeEnabled true

        // 设置支持的SO库架构
        ndk {
//            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi-v7a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        flavorDimensions "default" // 这个名字貌似随便取，也可以有多个，总之一定要有
        def defAppName = "猫豆阅读"
        // 友盟多渠道打包
        productFlavors {
            kuan {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }     // 酷安
            huawei {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }   // 华为
            xiaomi {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : "猫豆本地TXT"]
            }   // 小米
            tencent {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }   // 腾讯
            qh360 {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }   // 奇虎360
            baidu {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }   // 百度
            ali {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }   // 阿里
            meizu {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: name,
                                        APP_NAME           : defAppName]
            }   // 魅族
//            oppo {}   // oppo
//            vivo {}   // vivo
//
            productFlavors.all { flavor ->

            }
        }

    }

    // 签名配置
    signingConfigs {
        defaultSign {
            try {
                storeFile file("D:/Android/signedKey/zyb.jks")
                storePassword "123456"
                keyAlias "zyb"
                keyPassword "123456"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.defaultSign
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.defaultSign
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    /*GreenDao*/
    greendao {
        //数据库版本，数据库升级使用到 {@link OpenHelper#onUpgrade}
        schemaVersion rootProject.ext.databaseVersion
    }

    //定义一个装apk文件路径的数组
    def fileArray = []
    //自定义apk文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.contains('release')) {
                //获取每个打包产物
                def fileName = "猫豆阅读_${variant.productFlavors[0].name}_${variant.versionName}_${releaseTime()}.apk"
                println "自定义输出apk的名字:" + fileName;
                outputFileName = fileName;
                println "输出apk地址:" + outputFile.parentFile.absolutePath + java.io.File.separator + fileName
                fileArray.add(outputFile.parentFile.absolutePath + java.io.File.separator + fileName);
            }
        }
    }

    useLibrary 'org.apache.http.legacy'
    // 支持Java8
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    // 依赖 libs 目录下所有 Jar 包
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // 基础模块
    implementation project(':base')
    // 阅读模块
    implementation project(':reader')
    //业务通用模块
    implementation project(':common')
}

//build {
//    //复制apk到指定目录
//    doLast() {
//        println "需要复制apk的数量:" + fileArray.size()
//        forEachFile(fileArray)
//    }
//}
//
//def forEachFile(fileArray) {
//    fileArray.forEach { file ->
//        //遍历进行文件操作
//        println "任务3遍历apk文件"
//        rename_and_moveout_apk(file)
//    }
//}
//
//def rename_and_moveout_apk(orignalFile) {
//    def intoFile = rootDir + File.separator + "apk"
//    copy {
//        from orignalFile
//        into intoFile
//        println "任务4复制apk到指定位置:" + intoFile
//        rename("${android.defaultConfig.versionName}_${android.defaultConfig.versionCode}_", "")
//        println "任务5修改apk的命名"
//    }
//}

